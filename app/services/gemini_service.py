import google.generativeai as genai
from app.config.settings import settings
from typing import Optional
import logging

logger = logging.getLogger(__name__)

class GeminiService:
    def __init__(self):
        """Inicializa el servicio de Gemini con la API key"""
        genai.configure(api_key=settings.GEMINI_API_KEY)
        self.model = genai.GenerativeModel('gemini-pro')
    
    async def normalize_to_pseudocode(self, natural_language: str) -> str:
        """
        Convierte descripci√≥n en lenguaje natural a pseudoc√≥digo estructurado
        
        Args:
            natural_language: Descripci√≥n del algoritmo en lenguaje natural
            
        Returns:
            str: Pseudoc√≥digo normalizado siguiendo la gram√°tica establecida
        """
        prompt = f"""
        Convierte la siguiente descripci√≥n en lenguaje natural a pseudoc√≥digo siguiendo exactamente esta gram√°tica:

        REGLAS DE SINTAXIS:
        - Los procedimientos se definen como: nombre_procedimiento(parametros) begin ... end
        - Las asignaciones usan el s√≠mbolo: variable ü°® valor
        - Los bucles for: for variable ü°® inicio to fin do begin ... end
        - Los bucles while: while (condicion) do begin ... end
        - Los condicionales: if (condicion) then begin ... end else begin ... end
        - Los comentarios usan ‚ñ∫
        - Las llamadas a funciones: CALL nombre_funcion(parametros)
        
        DESCRIPCI√ìN A CONVERTIR:
        {natural_language}
        
        RESPUESTA (solo el pseudoc√≥digo, sin explicaciones adicionales):
        """
        
        try:
            response = await self._generate_content(prompt)
            return response.strip()
        except Exception as e:
            logger.error(f"Error al normalizar con Gemini: {e}")
            raise Exception(f"Error en la normalizaci√≥n: {str(e)}")
    
    async def correct_pseudocode(self, pseudocode: str, error_details: str) -> str:
        """
        Corrige pseudoc√≥digo que tiene errores sint√°cticos
        
        Args:
            pseudocode: Pseudoc√≥digo con errores
            error_details: Detalles del error encontrado
            
        Returns:
            str: Pseudoc√≥digo corregido
        """
        prompt = f"""
        El siguiente pseudoc√≥digo tiene errores sint√°cticos. Corr√≠gelo siguiendo exactamente la gram√°tica establecida:

        GRAM√ÅTICA REQUERIDA:
        - Procedimientos: nombre_procedimiento(parametros) begin ... end
        - Asignaciones: variable ü°® valor
        - For: for variable ü°® inicio to fin do begin ... end
        - While: while (condicion) do begin ... end
        - If: if (condicion) then begin ... end else begin ... end
        - Comentarios: ‚ñ∫
        - Llamadas: CALL nombre_funcion(parametros)
        
        PSEUDOC√ìDIGO CON ERRORES:
        {pseudocode}
        
        ERROR DETECTADO:
        {error_details}
        
        PSEUDOC√ìDIGO CORREGIDO (solo el c√≥digo, sin explicaciones):
        """
        
        try:
            response = await self._generate_content(prompt)
            return response.strip()
        except Exception as e:
            logger.error(f"Error al corregir con Gemini: {e}")
            raise Exception(f"Error en la correcci√≥n: {str(e)}")
    
    async def _generate_content(self, prompt: str) -> str:
        """
        M√©todo helper para generar contenido con Gemini
        
        Args:
            prompt: Prompt para enviar al modelo
            
        Returns:
            str: Respuesta del modelo
        """
        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            logger.error(f"Error en la generaci√≥n de contenido: {e}")
            raise

# Instancia global del servicio
gemini_service = GeminiService()